0aa786eaa13c6bfb7b947f198ad3e8f3
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SafeAreaProvider = SafeAreaProvider;
exports.useSafeAreaInsets = useSafeAreaInsets;
exports.useSafeAreaFrame = useSafeAreaFrame;
exports.withSafeAreaInsets = withSafeAreaInsets;
exports.useSafeArea = useSafeArea;
exports.SafeAreaContext = exports.SafeAreaConsumer = exports.SafeAreaFrameContext = exports.SafeAreaInsetsContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _NativeSafeAreaProvider = _interopRequireDefault(require("./NativeSafeAreaProvider"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SafeAreaInsetsContext = React.createContext(null);
exports.SafeAreaInsetsContext = SafeAreaInsetsContext;
var SafeAreaFrameContext = React.createContext(null);
exports.SafeAreaFrameContext = SafeAreaFrameContext;

function SafeAreaProvider(_ref4) {
  var children = _ref4.children,
      initialMetrics = _ref4.initialMetrics,
      initialSafeAreaInsets = _ref4.initialSafeAreaInsets,
      style = _ref4.style;

  var _ref, _ref2, _initialMetrics$inset, _ref3, _initialMetrics$frame;

  var parentInsets = useParentSafeAreaInsets();
  var parentFrame = useParentSafeAreaFrame();

  var _React$useState = React.useState((_ref = (_ref2 = (_initialMetrics$inset = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.insets) !== null && _initialMetrics$inset !== void 0 ? _initialMetrics$inset : initialSafeAreaInsets) !== null && _ref2 !== void 0 ? _ref2 : parentInsets) !== null && _ref !== void 0 ? _ref : null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      insets = _React$useState2[0],
      setInsets = _React$useState2[1];

  var _React$useState3 = React.useState((_ref3 = (_initialMetrics$frame = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.frame) !== null && _initialMetrics$frame !== void 0 ? _initialMetrics$frame : parentFrame) !== null && _ref3 !== void 0 ? _ref3 : {
    x: 0,
    y: 0,
    width: _reactNative.Dimensions.get('window').width,
    height: _reactNative.Dimensions.get('window').height
  }),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      frame = _React$useState4[0],
      setFrame = _React$useState4[1];

  var onInsetsChange = React.useCallback(function (event) {
    var _event$nativeEvent = event.nativeEvent,
        nextFrame = _event$nativeEvent.frame,
        nextInsets = _event$nativeEvent.insets;

    if (nextFrame && (nextFrame.height !== frame.height || nextFrame.width !== frame.width || nextFrame.x !== frame.x || nextFrame.y !== frame.y)) {
      setFrame(nextFrame);
    }

    if (!insets || nextInsets.bottom !== insets.bottom || nextInsets.left !== insets.left || nextInsets.right !== insets.right || nextInsets.top !== insets.top) {
      setInsets(nextInsets);
    }
  }, [frame, insets]);
  return React.createElement(_NativeSafeAreaProvider.default, {
    style: [styles.fill, style],
    onInsetsChange: onInsetsChange
  }, insets != null ? React.createElement(SafeAreaFrameContext.Provider, {
    value: frame
  }, React.createElement(SafeAreaInsetsContext.Provider, {
    value: insets
  }, children)) : null);
}

var styles = _reactNative.StyleSheet.create({
  fill: {
    flex: 1
  }
});

function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}

function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}

function useSafeAreaInsets() {
  var safeArea = React.useContext(SafeAreaInsetsContext);

  if (safeArea == null) {
    throw new Error('No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }

  return safeArea;
}

function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);

  if (frame == null) {
    throw new Error('No safe area frame value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');
  }

  return frame;
}

function withSafeAreaInsets(WrappedComponent) {
  return React.forwardRef(function (props, ref) {
    return React.createElement(SafeAreaConsumer, null, function (insets) {
      return React.createElement(WrappedComponent, _extends({}, props, {
        insets: insets,
        ref: ref
      }));
    });
  });
}

function useSafeArea() {
  return useSafeAreaInsets();
}

var SafeAreaConsumer = SafeAreaInsetsContext.Consumer;
exports.SafeAreaConsumer = SafeAreaConsumer;
var SafeAreaContext = SafeAreaInsetsContext;
exports.SafeAreaContext = SafeAreaContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"sources":["TouchableHighlight.js"],"names":["TouchableHighlight","props","showUnderlay","hasPressHandler","setState","extraChildStyle","opacity","activeOpacity","extraUnderlayStyle","backgroundColor","underlayColor","onShowUnderlay","onPress","onPressIn","onPressOut","onLongPress","hideUnderlay","onHideUnderlay","onStateChange","from","to","TOUCHABLE_STATE","BEGAN","UNDETERMINED","MOVED_OUTSIDE","state","children","child","React","Children","only","cloneElement","style","StyleSheet","compose","rest","renderChildren","Component","defaultProps","GenericTouchable","delayPressOut","propTypes","publicPropTypes","PropTypes","number","string","any","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GenericTouchable, { TOUCHABLE_STATE } from './GenericTouchable';\nimport { StyleSheet, View } from 'react-native';\nimport PropTypes from 'prop-types';\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: 'black',\n  };\n\n  static propTypes = {\n    ...GenericTouchable.publicPropTypes,\n    activeOpacity: PropTypes.number,\n    underlayColor: PropTypes.string,\n    style: PropTypes.any,\n    onShowUnderlay: PropTypes.func,\n    onHideUnderlay: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    };\n  }\n\n  // Copied from RN\n  showUnderlay = () => {\n    if (!this.hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay && this.props.onShowUnderlay();\n  };\n\n  hasPressHandler = () =>\n    this.props.onPress ||\n    this.props.onPressIn ||\n    this.props.onPressOut ||\n    this.props.onLongPress;\n\n  hideUnderlay = () => {\n    this.setState({\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    });\n    this.props.onHideUnderlay && this.props.onHideUnderlay();\n  };\n\n  renderChildren() {\n    if (!this.props.children) {\n      return <View />;\n    }\n\n    const child = React.Children.only(this.props.children);\n    return React.cloneElement(child, {\n      style: StyleSheet.compose(\n        child.props.style,\n        this.state.extraChildStyle\n      ),\n    });\n  }\n\n  onStateChange = (from, to) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.showUnderlay();\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.hideUnderlay();\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    const { extraUnderlayStyle } = this.state;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[style, extraUnderlayStyle]}\n        onStateChange={this.onStateChange}>\n        {this.renderChildren()}\n      </GenericTouchable>\n    );\n  }\n}\n"]}
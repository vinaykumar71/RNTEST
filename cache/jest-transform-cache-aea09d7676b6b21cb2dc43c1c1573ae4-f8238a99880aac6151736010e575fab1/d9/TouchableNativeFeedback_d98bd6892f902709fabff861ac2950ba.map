{"version":3,"sources":["TouchableNativeFeedback.js"],"names":["TouchableNativeFeedback","state","pressability","Pressability","getHitSlop","props","hitSlop","getLongPressDelayMS","delayLongPress","maybeNumber","getPressDelayMS","delayPressIn","getPressOutDelayMS","delayPressOut","getPressRectOffset","pressRetentionOffset","getTouchSoundDisabled","touchSoundDisabled","onLongPress","event","onPress","onPressIn","Platform","OS","_dispatchPressedStateChange","_dispatchHotspotUpdate","onPressMove","onPressOut","onResponderTerminationRequest","rejectResponderTermination","onStartShouldSetResponder","disabled","pressed","hostComponentRef","ReactNative","findHostInstance_DEPRECATED","console","warn","Commands","setPressed","nativeEvent","locationX","locationY","hotspotUpdate","element","React","Children","only","children","__DEV__","type","View","push","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","cloneElement","getBackgroundProp","background","undefined","SelectableBackground","useForeground","accessible","accessibilityLabel","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","accessibilityValue","importantForAccessibility","accessibilityLiveRegion","accessibilityViewIsModal","accessibilityElementsHidden","hasTVPreferredFocus","focusable","nativeID","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","onLayout","testID","isTV","_tvTouchable","TVTouchable","getDisabled","destroy","reset","Component","attribute","SelectableBackgroundBorderless","Ripple","color","borderless","canUseNativeForeground","Version","nativeForegroundAndroid","nativeBackgroundAndroid","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability from '../../Pressability/Pressability.js';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug.js';\nimport TVTouchable from './TVTouchable.js';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback.js';\nimport {Commands} from 'react-native/Libraries/Components/View/ViewNativeComponent';\nimport ReactNative from 'react-native/Libraries/Renderer/shims/ReactNative';\nimport type {PressEvent} from 'react-native/Libraries/Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport processColor from '../../StyleSheet/processColor';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: () => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n  |}> = () => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: () => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n  |}> = () => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean) => ({\n    type: 'RippleAndroid',\n    color: processColor(color),\n    borderless,\n  });\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  _tvTouchable: ?TVTouchable;\n\n  state: State = {\n    pressability: new Pressability({\n      getHitSlop: () => this.props.hitSlop,\n      getLongPressDelayMS: () => {\n        if (this.props.delayLongPress != null) {\n          const maybeNumber = this.props.delayLongPress;\n          if (typeof maybeNumber === 'number') {\n            return maybeNumber;\n          }\n        }\n        return 500;\n      },\n      getPressDelayMS: () => this.props.delayPressIn,\n      getPressOutDelayMS: () => this.props.delayPressOut,\n      getPressRectOffset: () => this.props.pressRetentionOffset,\n      getTouchSoundDisabled: () => this.props.touchSoundDisabled,\n      onLongPress: event => {\n        if (this.props.onLongPress != null) {\n          this.props.onLongPress(event);\n        }\n      },\n      onPress: event => {\n        if (this.props.onPress != null) {\n          this.props.onPress(event);\n        }\n      },\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(true);\n          this._dispatchHotspotUpdate(event);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n      onResponderTerminationRequest: () =>\n        !this.props.rejectResponderTermination,\n      onStartShouldSetResponder: () => !this.props.disabled,\n    }),\n  };\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: this.props.accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: this.props.accessibilityValue,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidMount(): void {\n    if (Platform.isTV) {\n      this._tvTouchable = new TVTouchable(this, {\n        getDisabled: () => this.props.disabled === true,\n        onBlur: event => {\n          if (this.props.onBlur != null) {\n            this.props.onBlur(event);\n          }\n        },\n        onFocus: event => {\n          if (this.props.onFocus != null) {\n            this.props.onFocus(event);\n          }\n        },\n        onPress: event => {\n          if (this.props.onPress != null) {\n            this.props.onPress(event);\n          }\n        },\n      });\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (Platform.isTV) {\n      if (this._tvTouchable != null) {\n        this._tvTouchable.destroy();\n      }\n    }\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? (background, useForeground) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : (background, useForeground) => null;\n\nmodule.exports = TouchableNativeFeedback;\n"]}
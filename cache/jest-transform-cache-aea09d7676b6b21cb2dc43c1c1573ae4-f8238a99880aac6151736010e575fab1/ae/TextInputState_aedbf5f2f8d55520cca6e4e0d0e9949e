5a3446cb13e365e5d123da1ff9e0466a
'use strict';

var Platform = require("../../Utilities/Platform");

var UIManager = require("../../ReactNative/UIManager");

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusField(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID != null) {
    currentlyFocusedID = textFieldID;
  }
}

function blurField(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID != null) {
    currentlyFocusedID = null;
  }
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID != null) {
    focusField(textFieldID);

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID != null) {
    blurField(textFieldID);

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusField: focusField,
  blurField: blurField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzRmllbGQiLCJ0ZXh0RmllbGRJRCIsImJsdXJGaWVsZCIsImZvY3VzVGV4dElucHV0IiwiT1MiLCJmb2N1cyIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJDb21tYW5kcyIsImJsdXJUZXh0SW5wdXQiLCJibHVyIiwicmVnaXN0ZXJJbnB1dCIsImFkZCIsInVucmVnaXN0ZXJJbnB1dCIsImRlbGV0ZSIsImlzVGV4dElucHV0IiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBY0E7O0FBRUEsSUFBTUEsUUFBUSxHQUFHQyxPQUFPLDRCQUF4Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sK0JBQXpCOztBQUVBLElBQUlFLGtCQUEyQixHQUFHLElBQWxDO0FBQ0EsSUFBTUMsTUFBTSxHQUFHLElBQUlDLEdBQUosRUFBZjs7QUFNQSxTQUFTQyxxQkFBVCxHQUEwQztBQUN4QyxTQUFPSCxrQkFBUDtBQUNEOztBQUVELFNBQVNJLFVBQVQsQ0FBb0JDLFdBQXBCLEVBQWdEO0FBQzlDLE1BQUlMLGtCQUFrQixLQUFLSyxXQUF2QixJQUFzQ0EsV0FBVyxJQUFJLElBQXpELEVBQStEO0FBQzdETCxJQUFBQSxrQkFBa0IsR0FBR0ssV0FBckI7QUFDRDtBQUNGOztBQUVELFNBQVNDLFNBQVQsQ0FBbUJELFdBQW5CLEVBQXlDO0FBQ3ZDLE1BQUlMLGtCQUFrQixLQUFLSyxXQUF2QixJQUFzQ0EsV0FBVyxJQUFJLElBQXpELEVBQStEO0FBQzdETCxJQUFBQSxrQkFBa0IsR0FBRyxJQUFyQjtBQUNEO0FBQ0Y7O0FBT0QsU0FBU08sY0FBVCxDQUF3QkYsV0FBeEIsRUFBOEM7QUFDNUMsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLElBQUksSUFBekQsRUFBK0Q7QUFDN0RELElBQUFBLFVBQVUsQ0FBQ0MsV0FBRCxDQUFWOztBQUNBLFFBQUlSLFFBQVEsQ0FBQ1csRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlQsTUFBQUEsU0FBUyxDQUFDVSxLQUFWLENBQWdCSixXQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNXLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENULE1BQUFBLFNBQVMsQ0FBQ1csMEJBQVYsQ0FDRUwsV0FERixFQUVFTixTQUFTLENBQUNZLG9CQUFWLENBQStCLGtCQUEvQixFQUFtREMsUUFBbkQsQ0FDR0wsY0FITCxFQUlFLElBSkY7QUFNRDtBQUNGO0FBQ0Y7O0FBT0QsU0FBU00sYUFBVCxDQUF1QlIsV0FBdkIsRUFBNkM7QUFDM0MsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLElBQUksSUFBekQsRUFBK0Q7QUFDN0RDLElBQUFBLFNBQVMsQ0FBQ0QsV0FBRCxDQUFUOztBQUNBLFFBQUlSLFFBQVEsQ0FBQ1csRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlQsTUFBQUEsU0FBUyxDQUFDZSxJQUFWLENBQWVULFdBQWY7QUFDRCxLQUZELE1BRU8sSUFBSVIsUUFBUSxDQUFDVyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDVCxNQUFBQSxTQUFTLENBQUNXLDBCQUFWLENBQ0VMLFdBREYsRUFFRU4sU0FBUyxDQUFDWSxvQkFBVixDQUErQixrQkFBL0IsRUFBbURDLFFBQW5ELENBQ0dDLGFBSEwsRUFJRSxJQUpGO0FBTUQ7QUFDRjtBQUNGOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJWLFdBQXZCLEVBQTRDO0FBQzFDSixFQUFBQSxNQUFNLENBQUNlLEdBQVAsQ0FBV1gsV0FBWDtBQUNEOztBQUVELFNBQVNZLGVBQVQsQ0FBeUJaLFdBQXpCLEVBQThDO0FBQzVDSixFQUFBQSxNQUFNLENBQUNpQixNQUFQLENBQWNiLFdBQWQ7QUFDRDs7QUFFRCxTQUFTYyxXQUFULENBQXFCZCxXQUFyQixFQUFtRDtBQUNqRCxTQUFPSixNQUFNLENBQUNtQixHQUFQLENBQVdmLFdBQVgsQ0FBUDtBQUNEOztBQUVEZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZuQixFQUFBQSxxQkFBcUIsRUFBckJBLHFCQURlO0FBRWZDLEVBQUFBLFVBQVUsRUFBVkEsVUFGZTtBQUdmRSxFQUFBQSxTQUFTLEVBQVRBLFNBSGU7QUFJZkMsRUFBQUEsY0FBYyxFQUFkQSxjQUplO0FBS2ZNLEVBQUFBLGFBQWEsRUFBYkEsYUFMZTtBQU1mRSxFQUFBQSxhQUFhLEVBQWJBLGFBTmU7QUFPZkUsRUFBQUEsZUFBZSxFQUFmQSxlQVBlO0FBUWZFLEVBQUFBLFdBQVcsRUFBWEE7QUFSZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLy8gVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgY29vcmRpbmF0aW5nIHRoZSBcImZvY3VzZWRcIiBzdGF0ZSBmb3Jcbi8vIFRleHRJbnB1dHMuIEFsbCBjYWxscyByZWxhdGluZyB0byB0aGUga2V5Ym9hcmQgc2hvdWxkIGJlIGZ1bm5lbGVkXG4vLyB0aHJvdWdoIGhlcmUuXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJy4uLy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcicpO1xuXG5sZXQgY3VycmVudGx5Rm9jdXNlZElEOiA/bnVtYmVyID0gbnVsbDtcbmNvbnN0IGlucHV0cyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgdGV4dCBmaWVsZCwgaWYgb25lIGV4aXN0c1xuICogSWYgbm8gdGV4dCBmaWVsZCBpcyBmb2N1c2VkIGl0IHJldHVybnMgbnVsbFxuICovXG5mdW5jdGlvbiBjdXJyZW50bHlGb2N1c2VkRmllbGQoKTogP251bWJlciB7XG4gIHJldHVybiBjdXJyZW50bHlGb2N1c2VkSUQ7XG59XG5cbmZ1bmN0aW9uIGZvY3VzRmllbGQodGV4dEZpZWxkSUQ6ID9udW1iZXIpOiB2b2lkIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCAhPT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IHRleHRGaWVsZElEO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsdXJGaWVsZCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEID09PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElEID0gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBUZXh0SW5wdXRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byBmb2N1c1xuICogRm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgdGhlIHRleHQgZmllbGQgd2FzIGFscmVhZHkgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBmb2N1c1RleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPSBudWxsKSB7XG4gICAgZm9jdXNGaWVsZCh0ZXh0RmllbGRJRCk7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmZvY3VzKHRleHRGaWVsZElEKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnQW5kcm9pZFRleHRJbnB1dCcpLkNvbW1hbmRzXG4gICAgICAgICAgLmZvY3VzVGV4dElucHV0LFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGV4dEZpZWxkSUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gdW5mb2N1c1xuICogVW5mb2N1c2VzIHRoZSBzcGVjaWZpZWQgdGV4dCBmaWVsZFxuICogbm9vcCBpZiBpdCB3YXNuJ3QgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBibHVyVGV4dElucHV0KHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSUQgPT09IHRleHRGaWVsZElEICYmIHRleHRGaWVsZElEICE9IG51bGwpIHtcbiAgICBibHVyRmllbGQodGV4dEZpZWxkSUQpO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5ibHVyKHRleHRGaWVsZElEKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnQW5kcm9pZFRleHRJbnB1dCcpLkNvbW1hbmRzXG4gICAgICAgICAgLmJsdXJUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmFkZCh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIGlucHV0cy5kZWxldGUodGV4dEZpZWxkSUQpO1xufVxuXG5mdW5jdGlvbiBpc1RleHRJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBpbnB1dHMuaGFzKHRleHRGaWVsZElEKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGN1cnJlbnRseUZvY3VzZWRGaWVsZCxcbiAgZm9jdXNGaWVsZCxcbiAgYmx1ckZpZWxkLFxuICBmb2N1c1RleHRJbnB1dCxcbiAgYmx1clRleHRJbnB1dCxcbiAgcmVnaXN0ZXJJbnB1dCxcbiAgdW5yZWdpc3RlcklucHV0LFxuICBpc1RleHRJbnB1dCxcbn07XG4iXX0=
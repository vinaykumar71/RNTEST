250e7b70a4fefc2d8b1feb74bb6bba7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.ForceTouchGestureHandler = exports.FlingGestureHandler = exports.TapGestureHandler = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _createHandler = _interopRequireDefault(require("./createHandler"));

var _GestureHandlerPropTypes = _interopRequireDefault(require("./GestureHandlerPropTypes"));

var _PlatformConstants = _interopRequireDefault(require("./PlatformConstants"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TapGestureHandler = (0, _createHandler.default)('TapGestureHandler', _objectSpread(_objectSpread({}, _GestureHandlerPropTypes.default), {}, {
  maxDurationMs: _propTypes.default.number,
  maxDelayMs: _propTypes.default.number,
  numberOfTaps: _propTypes.default.number,
  maxDeltaX: _propTypes.default.number,
  maxDeltaY: _propTypes.default.number,
  maxDist: _propTypes.default.number,
  minPointers: _propTypes.default.number
}), {});
exports.TapGestureHandler = TapGestureHandler;
var FlingGestureHandler = (0, _createHandler.default)('FlingGestureHandler', _objectSpread(_objectSpread({}, _GestureHandlerPropTypes.default), {}, {
  numberOfPointers: _propTypes.default.number,
  direction: _propTypes.default.number
}), {});
exports.FlingGestureHandler = FlingGestureHandler;

var ForceTouchFallback = function (_React$Component) {
  (0, _inherits2.default)(ForceTouchFallback, _React$Component);

  var _super = _createSuper(ForceTouchFallback);

  function ForceTouchFallback() {
    (0, _classCallCheck2.default)(this, ForceTouchFallback);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ForceTouchFallback, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      console.warn('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase');
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return ForceTouchFallback;
}(_react.default.Component);

var ForceTouchGestureHandler = _PlatformConstants.default && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)('ForceTouchGestureHandler', _objectSpread(_objectSpread({}, _GestureHandlerPropTypes.default), {}, {
  minForce: _propTypes.default.number,
  maxForce: _propTypes.default.number,
  feedbackOnActivation: _propTypes.default.bool
}), {}) : ForceTouchFallback;
exports.ForceTouchGestureHandler = ForceTouchGestureHandler;
ForceTouchGestureHandler.forceTouchAvailable = _PlatformConstants.default && _PlatformConstants.default.forceTouchAvailable || false;
var LongPressGestureHandler = (0, _createHandler.default)('LongPressGestureHandler', _objectSpread(_objectSpread({}, _GestureHandlerPropTypes.default), {}, {
  minDurationMs: _propTypes.default.number,
  maxDist: _propTypes.default.number
}), {});
exports.LongPressGestureHandler = LongPressGestureHandler;

function validatePanGestureHandlerProps(props) {
  if (props.minDeltaX && props.activeOffsetX) {
    throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");
  }

  if (props.maxDeltaX && props.failOffsetX) {
    throw new Error("It's not supported use minDeltaX with activeOffsetXStart or activeOffsetXEnd");
  }

  if (props.minDeltaY && props.activeOffsetY) {
    throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");
  }

  if (props.maxDeltaY && props.failOffsetY) {
    throw new Error("It's not supported use minDeltaX with activeOffsetYStart or activeOffsetYEnd");
  }

  if (Array.isArray(props.activeOffsetX) && (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)) {
    throw new Error("First element of activeOffsetX should be negative, a the second one should be positive");
  }

  if (Array.isArray(props.activeOffsetY) && (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)) {
    throw new Error("First element of activeOffsetY should be negative, a the second one should be positive");
  }

  if (Array.isArray(props.failOffsetX) && (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)) {
    throw new Error("First element of failOffsetX should be negative, a the second one should be positive");
  }

  if (Array.isArray(props.failOffsetY) && (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)) {
    throw new Error("First element of failOffsetY should be negative, a the second one should be positive");
  }
}

function transformPanGestureHandlerProps(props) {
  var res = _objectSpread({}, props);

  if (props.minDeltaX !== undefined) {
    delete res['minDeltaX'];
    res.activeOffsetXStart = -props.minDeltaX;
    res.activeOffsetXEnd = props.minDeltaX;
  }

  if (props.maxDeltaX !== undefined) {
    delete res['maxDeltaX'];
    res.failOffsetXStart = -props.maxDeltaX;
    res.failOffsetXEnd = props.maxDeltaX;
  }

  if (props.minOffsetX !== undefined) {
    delete res['minOffsetX'];

    if (props.minOffsetX < 0) {
      res.activeOffsetXStart = props.minOffsetX;
    } else {
      res.activeOffsetXEnd = props.minOffsetX;
    }
  }

  if (props.minDeltaY !== undefined) {
    delete res['minDeltaY'];
    res.activeOffsetYStart = -props.minDeltaY;
    res.activeOffsetYEnd = props.minDeltaY;
  }

  if (props.maxDeltaY !== undefined) {
    delete res['maxDeltaY'];
    res.failOffsetYStart = -props.maxDeltaY;
    res.failOffsetYEnd = props.maxDeltaY;
  }

  if (props.minOffsetY !== undefined) {
    delete res['minOffsetY'];

    if (props.minOffsetY < 0) {
      res.activeOffsetYStart = props.minOffsetY;
    } else {
      res.activeOffsetYEnd = props.minOffsetY;
    }
  }

  if (props.activeOffsetX !== undefined) {
    delete res['activeOffsetX'];

    if (Array.isArray(props.activeOffsetX)) {
      res.activeOffsetXStart = props.activeOffsetX[0];
      res.activeOffsetXEnd = props.activeOffsetX[1];
    } else if (props.activeOffsetX < 0) {
      res.activeOffsetXStart = props.activeOffsetX;
    } else {
      res.activeOffsetXEnd = props.activeOffsetX;
    }
  }

  if (props.activeOffsetY !== undefined) {
    delete res['activeOffsetY'];

    if (Array.isArray(props.activeOffsetY)) {
      res.activeOffsetYStart = props.activeOffsetY[0];
      res.activeOffsetYEnd = props.activeOffsetY[1];
    } else if (props.activeOffsetY < 0) {
      res.activeOffsetYStart = props.activeOffsetY;
    } else {
      res.activeOffsetYEnd = props.activeOffsetY;
    }
  }

  if (props.failOffsetX !== undefined) {
    delete res['failOffsetX'];

    if (Array.isArray(props.failOffsetX)) {
      res.failOffsetXStart = props.failOffsetX[0];
      res.failOffsetXEnd = props.failOffsetX[1];
    } else if (props.failOffsetX < 0) {
      res.failOffsetXStart = props.failOffsetX;
    } else {
      res.failOffsetXEnd = props.failOffsetX;
    }
  }

  if (props.failOffsetY !== undefined) {
    delete res['failOffsetY'];

    if (Array.isArray(props.failOffsetY)) {
      res.failOffsetYStart = props.failOffsetY[0];
      res.failOffsetYEnd = props.failOffsetY[1];
    } else if (props.failOffsetY < 0) {
      res.failOffsetYStart = props.failOffsetY;
    } else {
      res.failOffsetYEnd = props.failOffsetY;
    }
  }

  return res;
}

function managePanProps(props) {
  if (__DEV__) {
    validatePanGestureHandlerProps(props);
  }

  return transformPanGestureHandlerProps(props);
}

var PanGestureHandler = (0, _createHandler.default)('PanGestureHandler', _objectSpread(_objectSpread({}, _GestureHandlerPropTypes.default), {}, {
  activeOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
  activeOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
  failOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
  failOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
  minDist: _propTypes.default.number,
  minVelocity: _propTypes.default.number,
  minVelocityX: _propTypes.default.number,
  minVelocityY: _propTypes.default.number,
  minPointers: _propTypes.default.number,
  maxPointers: _propTypes.default.number,
  avgTouches: _propTypes.default.bool
}), {}, managePanProps, {
  activeOffsetYStart: true,
  activeOffsetYEnd: true,
  activeOffsetXStart: true,
  activeOffsetXEnd: true,
  failOffsetYStart: true,
  failOffsetYEnd: true,
  failOffsetXStart: true,
  failOffsetXEnd: true
});
exports.PanGestureHandler = PanGestureHandler;
var PinchGestureHandler = (0, _createHandler.default)('PinchGestureHandler', _GestureHandlerPropTypes.default, {});
exports.PinchGestureHandler = PinchGestureHandler;
var RotationGestureHandler = (0, _createHandler.default)('RotationGestureHandler', _GestureHandlerPropTypes.default, {});
exports.RotationGestureHandler = RotationGestureHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,